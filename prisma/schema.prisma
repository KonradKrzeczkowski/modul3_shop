// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}



model User {
  id           Int       @id @default(autoincrement())
  firstName    String?
  email        String    @unique
  passwordHash String
  address      Address[] 
  phone        String    @unique
  orders       Order[]
  cart         Cart?
  createdAt    DateTime  @default(now())
  country      String?   
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int
  imageUrl    String    @map("imageurl")  // <-- mapuje na kolumnÄ™ w DB
  categoryId  Int       @map("categoryid")
  brandId     Int?      @map("brandid")
  category    Category  @relation(fields: [categoryId], references: [id])
  brand       Brand?    @relation(fields: [brandId], references: [id])
  orderItems  OrderItem[]
  cartItems   CartItem[]
  createdAt   DateTime  @default(now()) @map("createdat")
}
model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  image       String?
products    Product[]
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String

  logo  String?
   products Product[]
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  status      String      @default("PENDING")
  totalAmount Float
  createdAt   DateTime    @default(now())
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
}

model OrderItem {
  id              Int      @id @default(autoincrement())
  orderId         Int
  productId       Int
  quantity        Int
  priceAtPurchase Float
  protection      Boolean  @default(false) 
  order           Order    @relation(fields: [orderId], references: [id])
  product         Product  @relation(fields: [productId], references: [id])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id])
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cartId     Int
  productId  Int
  quantity   Int      @default(1)
  addedPrice Float    // cena produktu w momencie dodania do koszyka
  cart       Cart     @relation(fields: [cartId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}
model Address {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  country     String
  province    String
  city        String
  postalCode  String
  addressLine String
  isMain      Boolean  @default(false) 
  createdAt   DateTime @default(now())
}